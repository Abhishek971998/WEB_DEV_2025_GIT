import React from "react";

const notes = [
  '[] == "" returns true because [] converts to ""',
  "delete operator returns true if deletion is successful",
  '<div role="button" tabIndex={0}> makes a div behave like a button',
  ":nth-child(even) or :nth-child(odd) helps style alternating children",
  'arguments[0] = "new value" works only in non-strict mode',
  "function getData(a, b, ...rest) or (a = 2, b): arguments.length and getData.length ignore default/rest params",
  "5 types of scope: global, block, function/local, module, script",
  '<script type="module"> makes variables module-scoped (private)',
  "[[1, 2 , [3, 4]]] use flat() or toString() --- flat only flattens  one level",
];

// not everthing in js is object
//boxing ---primative converts to objects for certain time period and later destored
// null and undefined dont have any methods hence everything is not object
// set button type to button("submit") if avoid submit form
// to remove all default styles of any tag add all : unset
// in arrow functipns this value is inherited from parent scope (settimeout)
// console.log(+true) // 1 whenever + is added then js tries to convert to number
//

// console.log(parseInt("100Abhsi")); //100
// console.log(parseInt("100+20")); //100
// console.log(parseInt(100 + 33)); //133

// ðŸ›  npm vs npx
// npm: Installs packages globally or locally.
// â†’ npm install <package>

// npx: Runs a package without installing it permanently.
// â†’ npx create-react-app myApp

// ðŸ“¦ package.json vs package-lock.json
// package.json:

// Lists project dependencies and scripts.

// Created with npm init.

// Editable by the developer.

// package-lock.json:

// Locks exact versions of dependencies and sub-dependencies.

// Ensures consistent installs across systems.

// Auto-generated by npm

// { count: 0 } == { count: 0 } // false
// React uses shallow comparison to determine if state has changed. It doesn't deeply check the
// contents of objects or arrays. So even though the contents look the same, the reference is different.

// Thus, React thinks:

// â€œOh, a new object? Must be a change! Let me re-render.

// dont use arrow funtions on input handlesor JSX because when ur app crashes
// then you wont be able to trace it ....as error says anayomous

//USEEFFECT
// React will only update(batches) all the set state once
// useState setState are asynorous
// react does not track normal varaible updates or values

// Always child (bottom to top order) will mount first (useEffect)

// If  <Child />
// <GrandChild />  then child will mount first (line by line)
// Unmount will be in reverse order
// GrandChild
//  child
//  Parent
//  Parent UNmount
//  CHILD UNmount
//  GRAND UNmount

// Always add premitive values in dependency array ...avoid array and objects
// {getNestedValue} = obj ===== pass this to dependency
//

// Always use unique and stable keys for list items in React (like IDs). If you use indexes or
//  non-unique values as keys and modify the list (e.g., delete items),
//  React may mix up the component state (like checkbox selection), leading to unexpected behavior.
// Modern JavaScript engines optimize performance by compiling parts of the code to machine code at runtime.
// This process is called Just-In-Time (JIT) compilation â€” it's a mix between interpreting and compiling
// only  var  declared varibale is added  in global scope  they are added to window object
// let creates block scope ---by dafault there is no block
// 3.toString() wont work bcoz it thinks yuour are adding decimal number
// Prefer static  methods like String(2) then toString
//  0 == -0 // true  and Nan == Nan //false
// use Object.is(0, -0) //false

const RevisionShorts = () => {
  return (
    <div className="min-h-screen bg-gray-100 flex justify-center items-start py-10 px-4">
      <div className="bg-white shadow-lg rounded-2xl p-6 max-w-3xl w-full">
        <h2 className="text-2xl font-bold mb-6 text-center text-blue-700">
          Front-end Master â€“ Shorts #4
        </h2>

        <div className="space-y-4 text-gray-800">
          {notes.map((note, index) => (
            <h3
              key={index}
              className="bg-blue-50 p-3 rounded-md shadow-sm leading-relaxed"
            >
              âœ… {note}
            </h3>
          ))}
        </div>
      </div>
    </div>
  );
};

export default RevisionShorts;
